/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package endodump2strava.strava.api

import endodump2strava.strava.model.ActivityStats
import endodump2strava.strava.model.DetailedAthlete
import endodump2strava.strava.model.Fault
import endodump2strava.strava.model.Zones
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object AthletesApi {

  /**
   * Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
   * 
   * Expected answers:
   *   code 200 : DetailedAthlete (Profile information for the authenticated athlete.)
   *   code 0 : Fault (Unexpected error.)
   */
  def getLoggedInAthlete(): ApiRequest[DetailedAthlete] =
    ApiRequest[DetailedAthlete](ApiMethods.GET, "https://www.strava.com/api/v3", "/athlete", "application/json")
      .withSuccessResponse[DetailedAthlete](200)
      .withDefaultErrorResponse[Fault]
        /**
   * Returns the the authenticated athlete&#39;s heart rate and power zones. Requires profile:read_all.
   * 
   * Expected answers:
   *   code 200 : Zones (Heart rate and power zones.)
   *   code 0 : Fault (Unexpected error.)
   */
  def getLoggedInAthleteZones(): ApiRequest[Zones] =
    ApiRequest[Zones](ApiMethods.GET, "https://www.strava.com/api/v3", "/athlete/zones", "application/json")
      .withSuccessResponse[Zones](200)
      .withDefaultErrorResponse[Fault]
        /**
   * Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.
   * 
   * Expected answers:
   *   code 200 : ActivityStats (Activity stats of the athlete.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param id The identifier of the athlete. Must match the authenticated athlete.
   */
  def getStats(id: Long): ApiRequest[ActivityStats] =
    ApiRequest[ActivityStats](ApiMethods.GET, "https://www.strava.com/api/v3", "/athletes/{id}/stats", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[ActivityStats](200)
      .withDefaultErrorResponse[Fault]
        /**
   * Update the currently authenticated athlete. Requires profile:write scope.
   * 
   * Expected answers:
   *   code 200 : DetailedAthlete (Profile information for the authenticated athlete.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param weight The weight of the athlete in kilograms.
   */
  def updateLoggedInAthlete(weight: Float): ApiRequest[DetailedAthlete] =
    ApiRequest[DetailedAthlete](ApiMethods.PUT, "https://www.strava.com/api/v3", "/athlete", "multipart/form-data")
      .withPathParam("weight", weight)
      .withSuccessResponse[DetailedAthlete](200)
      .withDefaultErrorResponse[Fault]
      

}

