/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package endodump2strava.strava.api

import endodump2strava.strava.model.Fault
import endodump2strava.strava.model.StreamSet
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object StreamsApi {

  /**
   * Returns the given activity&#39;s streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
   * 
   * Expected answers:
   *   code 200 : StreamSet (The set of requested streams.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param id The identifier of the activity.
   * @param keys Desired stream types.
   * @param keyByType Must be true.
   */
  def getActivityStreams(id: Long, keys: Seq[String], keyByType: Boolean): ApiRequest[StreamSet] =
    ApiRequest[StreamSet](ApiMethods.GET, "https://www.strava.com/api/v3", "/activities/{id}/streams", "application/json")
      .withQueryParam("keys", ArrayValues(keys, CSV))
      .withQueryParam("key_by_type", keyByType)
      .withPathParam("id", id)
      .withSuccessResponse[StreamSet](200)
      .withDefaultErrorResponse[Fault]
        /**
   * Returns the given route&#39;s streams. Requires read_all scope for private routes.
   * 
   * Expected answers:
   *   code 200 : StreamSet (The set of requested streams.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param id The identifier of the route.
   */
  def getRouteStreams(id: Long): ApiRequest[StreamSet] =
    ApiRequest[StreamSet](ApiMethods.GET, "https://www.strava.com/api/v3", "/routes/{id}/streams", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[StreamSet](200)
      .withDefaultErrorResponse[Fault]
        /**
   * Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
   * 
   * Expected answers:
   *   code 200 : StreamSet (The set of requested streams.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param id The identifier of the segment effort.
   * @param keys The types of streams to return.
   * @param keyByType Must be true.
   */
  def getSegmentEffortStreams(id: Long, keys: Seq[String], keyByType: Boolean): ApiRequest[StreamSet] =
    ApiRequest[StreamSet](ApiMethods.GET, "https://www.strava.com/api/v3", "/segment_efforts/{id}/streams", "application/json")
      .withQueryParam("keys", ArrayValues(keys, CSV))
      .withQueryParam("key_by_type", keyByType)
      .withPathParam("id", id)
      .withSuccessResponse[StreamSet](200)
      .withDefaultErrorResponse[Fault]
        /**
   * Returns the given segment&#39;s streams. Requires read_all scope for private segments.
   * 
   * Expected answers:
   *   code 200 : StreamSet (The set of requested streams.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param id The identifier of the segment.
   * @param keys The types of streams to return.
   * @param keyByType Must be true.
   */
  def getSegmentStreams(id: Long, keys: Seq[String], keyByType: Boolean): ApiRequest[StreamSet] =
    ApiRequest[StreamSet](ApiMethods.GET, "https://www.strava.com/api/v3", "/segments/{id}/streams", "application/json")
      .withQueryParam("keys", ArrayValues(keys, CSV))
      .withQueryParam("key_by_type", keyByType)
      .withPathParam("id", id)
      .withSuccessResponse[StreamSet](200)
      .withDefaultErrorResponse[Fault]
      

}

