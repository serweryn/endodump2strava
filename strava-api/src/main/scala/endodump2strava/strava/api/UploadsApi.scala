/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package endodump2strava.strava.api

import endodump2strava.strava.model.Fault
import java.io.File
import endodump2strava.strava.model.Upload
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object UploadsApi {

  /**
   * Uploads a new data file to create an activity from. Requires activity:write scope.
   * 
   * Expected answers:
   *   code 201 : Upload (A representation of the created upload.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param file The uploaded file.
   * @param name The desired name of the resulting activity.
   * @param description The desired description of the resulting activity.
   * @param trainer Whether the resulting activity should be marked as having been performed on a trainer.
   * @param commute Whether the resulting activity should be tagged as a commute.
   * @param dataType The format of the uploaded file.
   * @param externalId The desired external identifier of the resulting activity.
   */
  def createUpload(file: Option[File] = None, name: Option[String] = None, description: Option[String] = None, trainer: Option[String] = None, commute: Option[String] = None, dataType: Option[String] = None, externalId: Option[String] = None): ApiRequest[Upload] =
    ApiRequest[Upload](ApiMethods.POST, "https://www.strava.com/api/v3", "/uploads", "multipart/form-data")
      .withFormParam("file", file)
      .withFormParam("name", name)
      .withFormParam("description", description)
      .withFormParam("trainer", trainer)
      .withFormParam("commute", commute)
      .withFormParam("data_type", dataType)
      .withFormParam("external_id", externalId)
      .withSuccessResponse[Upload](201)
      .withDefaultErrorResponse[Fault]
        /**
   * Returns an upload for a given identifier. Requires activity:write scope.
   * 
   * Expected answers:
   *   code 200 : Upload (Representation of the upload.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param uploadId The identifier of the upload.
   */
  def getUploadById(uploadId: Long): ApiRequest[Upload] =
    ApiRequest[Upload](ApiMethods.GET, "https://www.strava.com/api/v3", "/uploads/{uploadId}", "application/json")
      .withPathParam("uploadId", uploadId)
      .withSuccessResponse[Upload](200)
      .withDefaultErrorResponse[Fault]
      

}

