/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package endodump2strava.strava.api

import endodump2strava.strava.model.DetailedSegment
import endodump2strava.strava.model.ExplorerResponse
import endodump2strava.strava.model.Fault
import endodump2strava.strava.model.SummarySegment
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object SegmentsApi {

  /**
   * Returns the top 10 segments matching a specified query.
   * 
   * Expected answers:
   *   code 200 : ExplorerResponse (List of matching segments.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param bounds The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]
   * @param activityType Desired activity type.
   * @param minCat The minimum climbing category.
   * @param maxCat The maximum climbing category.
   */
  def exploreSegments(bounds: Seq[Float], activityType: Option[String] = None, minCat: Option[Int] = None, maxCat: Option[Int] = None): ApiRequest[ExplorerResponse] =
    ApiRequest[ExplorerResponse](ApiMethods.GET, "https://www.strava.com/api/v3", "/segments/explore", "application/json")
      .withQueryParam("bounds", ArrayValues(bounds, CSV))
      .withQueryParam("activity_type", activityType)
      .withQueryParam("min_cat", minCat)
      .withQueryParam("max_cat", maxCat)
      .withSuccessResponse[ExplorerResponse](200)
      .withDefaultErrorResponse[Fault]
        /**
   * List of the authenticated athlete&#39;s starred segments. Private segments are filtered out unless requested by a token with read_all scope.
   * 
   * Expected answers:
   *   code 200 : Seq[SummarySegment] (List of the authenticated athlete&#39;s starred segments.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param page Page number. Defaults to 1.
   * @param perPage Number of items per page. Defaults to 30.
   */
  def getLoggedInAthleteStarredSegments(page: Option[Int] = None, perPage: Option[Int]): ApiRequest[Seq[SummarySegment]] =
    ApiRequest[Seq[SummarySegment]](ApiMethods.GET, "https://www.strava.com/api/v3", "/segments/starred", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withSuccessResponse[Seq[SummarySegment]](200)
      .withDefaultErrorResponse[Fault]
        /**
   * Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
   * 
   * Expected answers:
   *   code 200 : DetailedSegment (Representation of a segment.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param id The identifier of the segment.
   */
  def getSegmentById(id: Long): ApiRequest[DetailedSegment] =
    ApiRequest[DetailedSegment](ApiMethods.GET, "https://www.strava.com/api/v3", "/segments/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[DetailedSegment](200)
      .withDefaultErrorResponse[Fault]
        /**
   * Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
   * 
   * Expected answers:
   *   code 200 : DetailedSegment (Representation of a segment.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param id The identifier of the segment to star.
   * @param starred If true, star the segment; if false, unstar the segment.
   */
  def starSegment(id: Long, starred: Boolean): ApiRequest[DetailedSegment] =
    ApiRequest[DetailedSegment](ApiMethods.PUT, "https://www.strava.com/api/v3", "/segments/{id}/starred", "application/json")
      .withFormParam("starred", starred)
      .withPathParam("id", id)
      .withSuccessResponse[DetailedSegment](200)
      .withDefaultErrorResponse[Fault]
      

}

