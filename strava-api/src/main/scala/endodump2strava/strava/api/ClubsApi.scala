/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package endodump2strava.strava.api

import endodump2strava.strava.model.DetailedClub
import endodump2strava.strava.model.Fault
import endodump2strava.strava.model.SummaryActivity
import endodump2strava.strava.model.SummaryAthlete
import endodump2strava.strava.model.SummaryClub
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object ClubsApi {

  /**
   * Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
   * 
   * Expected answers:
   *   code 200 : Seq[SummaryActivity] (A list of activities.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param id The identifier of the club.
   * @param page Page number. Defaults to 1.
   * @param perPage Number of items per page. Defaults to 30.
   */
  def getClubActivitiesById(id: Long, page: Option[Int] = None, perPage: Option[Int]): ApiRequest[Seq[SummaryActivity]] =
    ApiRequest[Seq[SummaryActivity]](ApiMethods.GET, "https://www.strava.com/api/v3", "/clubs/{id}/activities", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withPathParam("id", id)
      .withSuccessResponse[Seq[SummaryActivity]](200)
      .withDefaultErrorResponse[Fault]
        /**
   * Returns a list of the administrators of a given club.
   * 
   * Expected answers:
   *   code 200 : Seq[SummaryAthlete] (A list of summary athlete representations.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param id The identifier of the club.
   * @param page Page number. Defaults to 1.
   * @param perPage Number of items per page. Defaults to 30.
   */
  def getClubAdminsById(id: Long, page: Option[Int] = None, perPage: Option[Int]): ApiRequest[Seq[SummaryAthlete]] =
    ApiRequest[Seq[SummaryAthlete]](ApiMethods.GET, "https://www.strava.com/api/v3", "/clubs/{id}/admins", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withPathParam("id", id)
      .withSuccessResponse[Seq[SummaryAthlete]](200)
      .withDefaultErrorResponse[Fault]
        /**
   * Returns a given club using its identifier.
   * 
   * Expected answers:
   *   code 200 : DetailedClub (The detailed representation of a club.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param id The identifier of the club.
   */
  def getClubById(id: Long): ApiRequest[DetailedClub] =
    ApiRequest[DetailedClub](ApiMethods.GET, "https://www.strava.com/api/v3", "/clubs/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[DetailedClub](200)
      .withDefaultErrorResponse[Fault]
        /**
   * Returns a list of the athletes who are members of a given club.
   * 
   * Expected answers:
   *   code 200 : Seq[SummaryAthlete] (A list of summary athlete representations.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param id The identifier of the club.
   * @param page Page number. Defaults to 1.
   * @param perPage Number of items per page. Defaults to 30.
   */
  def getClubMembersById(id: Long, page: Option[Int] = None, perPage: Option[Int]): ApiRequest[Seq[SummaryAthlete]] =
    ApiRequest[Seq[SummaryAthlete]](ApiMethods.GET, "https://www.strava.com/api/v3", "/clubs/{id}/members", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withPathParam("id", id)
      .withSuccessResponse[Seq[SummaryAthlete]](200)
      .withDefaultErrorResponse[Fault]
        /**
   * Returns a list of the clubs whose membership includes the authenticated athlete.
   * 
   * Expected answers:
   *   code 200 : Seq[SummaryClub] (A list of summary club representations.)
   *   code 0 : Fault (Unexpected error.)
   * 
   * @param page Page number. Defaults to 1.
   * @param perPage Number of items per page. Defaults to 30.
   */
  def getLoggedInAthleteClubs(page: Option[Int] = None, perPage: Option[Int]): ApiRequest[Seq[SummaryClub]] =
    ApiRequest[Seq[SummaryClub]](ApiMethods.GET, "https://www.strava.com/api/v3", "/athlete/clubs", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withSuccessResponse[Seq[SummaryClub]](200)
      .withDefaultErrorResponse[Fault]
      

}

