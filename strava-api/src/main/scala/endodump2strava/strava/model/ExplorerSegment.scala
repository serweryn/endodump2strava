/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package endodump2strava.strava.model

import io.swagger.client.core.ApiModel
import org.joda.time.DateTime
import java.util.UUID

case class ExplorerSegment (
  /* The unique identifier of this segment */
  id: Option[Long] = None,
  /* The name of this segment */
  name: Option[String] = None,
  /* The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. If climb_category = 5, climb_category_desc = HC. If climb_category = 2, climb_category_desc = 3. */
  climbCategory: Option[Int] = None,
  /* The description for the category of the climb */
  climbCategoryDesc: Option[ExplorerSegmentEnums.ClimbCategoryDesc] = None,
  /* The segment's average grade, in percents */
  avgGrade: Option[Float] = None,
  startLatlng: Option[LatLng] = None,
  endLatlng: Option[LatLng] = None,
  /* The segments's evelation difference, in meters */
  elevDifference: Option[Float] = None,
  /* The segment's distance, in meters */
  distance: Option[Float] = None,
  /* The polyline of the segment */
  points: Option[String] = None
) extends ApiModel

object ExplorerSegmentEnums {

  type ClimbCategoryDesc = ClimbCategoryDesc.Value
  object ClimbCategoryDesc extends Enumeration {
    val NC = Value("NC")
    val `4` = Value("4")
    val `3` = Value("3")
    val `2` = Value("2")
    val `1` = Value("1")
    val HC = Value("HC")
  }

}

