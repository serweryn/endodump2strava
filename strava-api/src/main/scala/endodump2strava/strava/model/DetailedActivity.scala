/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package endodump2strava.strava.model

import io.swagger.client.core.ApiModel
import org.joda.time.DateTime
import java.util.UUID

case class DetailedActivity (
  /* The unique identifier of the activity */
  id: Option[Long] = None,
  /* The identifier provided at upload time */
  externalId: Option[String] = None,
  /* The identifier of the upload that resulted in this activity */
  uploadId: Option[Long] = None,
  athlete: Option[MetaAthlete] = None,
  /* The name of the activity */
  name: Option[String] = None,
  /* The activity's distance, in meters */
  distance: Option[Float] = None,
  /* The activity's moving time, in seconds */
  movingTime: Option[Int] = None,
  /* The activity's elapsed time, in seconds */
  elapsedTime: Option[Int] = None,
  /* The activity's total elevation gain. */
  totalElevationGain: Option[Float] = None,
  /* The activity's highest elevation, in meters */
  elevHigh: Option[Float] = None,
  /* The activity's lowest elevation, in meters */
  elevLow: Option[Float] = None,
  `type`: Option[String] = None,
  /* The time at which the activity was started. */
  startDate: Option[DateTime] = None,
  /* The time at which the activity was started in the local timezone. */
  startDateLocal: Option[DateTime] = None,
  /* The timezone of the activity */
  timezone: Option[String] = None,
  startLatlng: Option[LatLng] = None,
  endLatlng: Option[LatLng] = None,
  /* The number of achievements gained during this activity */
  achievementCount: Option[Int] = None,
  /* The number of kudos given for this activity */
  kudosCount: Option[Int] = None,
  /* The number of comments for this activity */
  commentCount: Option[Int] = None,
  /* The number of athletes for taking part in a group activity */
  athleteCount: Option[Int] = None,
  /* The number of Instagram photos for this activity */
  photoCount: Option[Int] = None,
  /* The number of Instagram and Strava photos for this activity */
  totalPhotoCount: Option[Int] = None,
  map: Option[PolylineMap] = None,
  /* Whether this activity was recorded on a training machine */
  trainer: Option[Boolean] = None,
  /* Whether this activity is a commute */
  commute: Option[Boolean] = None,
  /* Whether this activity was created manually */
  manual: Option[Boolean] = None,
  /* Whether this activity is private */
  `private`: Option[Boolean] = None,
  /* Whether this activity is flagged */
  flagged: Option[Boolean] = None,
  /* The activity's workout type */
  workoutType: Option[Int] = None,
  /* The unique identifier of the upload in string format */
  uploadIdStr: Option[String] = None,
  /* The activity's average speed, in meters per second */
  averageSpeed: Option[Float] = None,
  /* The activity's max speed, in meters per second */
  maxSpeed: Option[Float] = None,
  /* Whether the logged-in athlete has kudoed this activity */
  hasKudoed: Option[Boolean] = None,
  /* The id of the gear for the activity */
  gearId: Option[String] = None,
  /* The total work done in kilojoules during this activity. Rides only */
  kilojoules: Option[Float] = None,
  /* Average power output in watts during this activity. Rides only */
  averageWatts: Option[Float] = None,
  /* Whether the watts are from a power meter, false if estimated */
  deviceWatts: Option[Boolean] = None,
  /* Rides with power meter data only */
  maxWatts: Option[Int] = None,
  /* Similar to Normalized Power. Rides with power meter data only */
  weightedAverageWatts: Option[Int] = None,
  /* The description of the activity */
  description: Option[String] = None,
  photos: Option[PhotosSummary] = None,
  gear: Option[SummaryGear] = None,
  /* The number of kilocalories consumed during this activity */
  calories: Option[Float] = None,
  segmentEfforts: Option[Seq[DetailedSegmentEffort]] = None,
  /* The name of the device used to record the activity */
  deviceName: Option[String] = None,
  /* The token used to embed a Strava activity */
  embedToken: Option[String] = None,
  /* The splits of this activity in metric units (for runs) */
  splitsMetric: Option[Seq[Split]] = None,
  /* The splits of this activity in imperial units (for runs) */
  splitsStandard: Option[Seq[Split]] = None,
  laps: Option[Seq[Lap]] = None,
  bestEfforts: Option[Seq[DetailedSegmentEffort]] = None
) extends ApiModel


