/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package endodump2strava.strava.model

import io.swagger.client.core.ApiModel
import org.joda.time.DateTime
import java.util.UUID

case class DetailedSegmentEffort (
  /* The unique identifier of this effort */
  id: Option[Long] = None,
  /* The unique identifier of the activity related to this effort */
  activityId: Option[Long] = None,
  /* The effort's elapsed time */
  elapsedTime: Option[Int] = None,
  /* The time at which the effort was started. */
  startDate: Option[DateTime] = None,
  /* The time at which the effort was started in the local timezone. */
  startDateLocal: Option[DateTime] = None,
  /* The effort's distance in meters */
  distance: Option[Float] = None,
  /* Whether this effort is the current best on the leaderboard */
  isKom: Option[Boolean] = None,
  /* The name of the segment on which this effort was performed */
  name: Option[String] = None,
  activity: Option[MetaActivity] = None,
  athlete: Option[MetaAthlete] = None,
  /* The effort's moving time */
  movingTime: Option[Int] = None,
  /* The start index of this effort in its activity's stream */
  startIndex: Option[Int] = None,
  /* The end index of this effort in its activity's stream */
  endIndex: Option[Int] = None,
  /* The effort's average cadence */
  averageCadence: Option[Float] = None,
  /* The average wattage of this effort */
  averageWatts: Option[Float] = None,
  /* For riding efforts, whether the wattage was reported by a dedicated recording device */
  deviceWatts: Option[Boolean] = None,
  /* The heart heart rate of the athlete during this effort */
  averageHeartrate: Option[Float] = None,
  /* The maximum heart rate of the athlete during this effort */
  maxHeartrate: Option[Float] = None,
  segment: Option[SummarySegment] = None,
  /* The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload */
  komRank: Option[Int] = None,
  /* The rank of the effort on the athlete's leaderboard if it belongs in the top 3 at the time of upload */
  prRank: Option[Int] = None,
  /* Whether this effort should be hidden when viewed within an activity */
  hidden: Option[Boolean] = None
) extends ApiModel


