/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package endodump2strava.strava.model

import io.swagger.client.core.ApiModel
import org.joda.time.DateTime
import java.util.UUID

case class DetailedClub (
  /* The club's unique identifier. */
  id: Option[Long] = None,
  /* Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\" */
  resourceState: Option[Int] = None,
  /* The club's name. */
  name: Option[String] = None,
  /* URL to a 60x60 pixel profile picture. */
  profileMedium: Option[String] = None,
  /* URL to a ~1185x580 pixel cover photo. */
  coverPhoto: Option[String] = None,
  /* URL to a ~360x176  pixel cover photo. */
  coverPhotoSmall: Option[String] = None,
  sportType: Option[DetailedClubEnums.SportType] = None,
  /* The club's city. */
  city: Option[String] = None,
  /* The club's state or geographical region. */
  state: Option[String] = None,
  /* The club's country. */
  country: Option[String] = None,
  /* Whether the club is private. */
  `private`: Option[Boolean] = None,
  /* The club's member count. */
  memberCount: Option[Int] = None,
  /* Whether the club is featured or not. */
  featured: Option[Boolean] = None,
  /* Whether the club is verified or not. */
  verified: Option[Boolean] = None,
  /* The club's vanity URL. */
  url: Option[String] = None,
  /* The membership status of the logged-in athlete. */
  membership: Option[DetailedClubEnums.Membership] = None,
  /* Whether the currently logged-in athlete is an administrator of this club. */
  admin: Option[Boolean] = None,
  /* Whether the currently logged-in athlete is the owner of this club. */
  owner: Option[Boolean] = None,
  /* The number of athletes in the club that the logged-in athlete follows. */
  followingCount: Option[Int] = None
) extends ApiModel

object DetailedClubEnums {

  type SportType = SportType.Value
  type Membership = Membership.Value
  object SportType extends Enumeration {
    val Cycling = Value("cycling")
    val Running = Value("running")
    val Triathlon = Value("triathlon")
    val Other = Value("other")
  }

  object Membership extends Enumeration {
    val Member = Value("member")
    val Pending = Value("pending")
  }

}

